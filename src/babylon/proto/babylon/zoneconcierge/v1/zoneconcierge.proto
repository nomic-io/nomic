syntax = "proto3";
package babylon.zoneconcierge.v1;

import "gogoproto/gogo.proto";
import "google/protobuf/timestamp.proto";
import "tendermint/crypto/proof.proto";
import "babylon/btccheckpoint/v1/btccheckpoint.proto";
import "babylon/checkpointing/v1/bls_key.proto";
import "babylon/checkpointing/v1/checkpoint.proto";
import "babylon/epoching/v1/epoching.proto";
import "babylon/btclightclient/v1/btclightclient.proto";

option go_package = "github.com/babylonchain/babylon/x/zoneconcierge/types";

// IndexedHeader is the metadata of a CZ header
message IndexedHeader {
  // chain_id is the unique ID of the chain
  string chain_id = 1;
  // hash is the hash of this header
  bytes hash = 2;
  // height is the height of this header on CZ ledger
  // (hash, height) jointly provides the position of the header on CZ ledger
  uint64 height = 3;
  // time is the timestamp of this header on CZ ledger
  // it is needed for CZ to unbond all mature validators/delegations
  // before this timestamp when this header is BTC-finalised
  google.protobuf.Timestamp time = 4 [ (gogoproto.stdtime) = true ];
  // babylon_header_hash is the hash of the babylon block that includes this CZ
  // header
  bytes babylon_header_hash = 5;
  // babylon_header_height is the height of the babylon block that includes this CZ
  // header
  uint64 babylon_header_height = 6;
  // epoch is the epoch number of this header on Babylon ledger
  uint64 babylon_epoch = 7;
  // babylon_tx_hash is the hash of the tx that includes this header
  // (babylon_block_height, babylon_tx_hash) jointly provides the position of
  // the header on Babylon ledger
  bytes babylon_tx_hash = 8;
}

// Forks is a list of non-canonical `IndexedHeader`s at the same height.
// For example, assuming the following blockchain
// ```
// A <- B <- C <- D <- E
//            \ -- D1
//            \ -- D2
// ```
// Then the fork will be {[D1, D2]} where each item is in struct `IndexedBlock`.
//
// Note that each `IndexedHeader` in the fork should have a valid quorum
// certificate. Such forks exist since Babylon considers CZs might have
// dishonest majority. Also note that the IBC-Go implementation will only
// consider the first header in a fork valid, since the subsequent headers
// cannot be verified without knowing the validator set in the previous header.
message Forks {
  // blocks is the list of non-canonical indexed headers at the same height
  repeated IndexedHeader headers = 3;
}

// ChainInfo is the information of a CZ
message ChainInfo {
  // chain_id is the ID of the chain
  string chain_id = 1;
  // latest_header is the latest header in CZ's canonical chain
  IndexedHeader latest_header = 2;
  // latest_forks is the latest forks, formed as a series of IndexedHeader (from
  // low to high)
  Forks latest_forks = 3;
  // timestamped_headers_count is the number of timestamped headers in CZ's
  // canonical chain
  uint64 timestamped_headers_count = 4;
}

// FinalizedChainInfo is the information of a CZ that is BTC-finalised
message FinalizedChainInfo {
  // chain_id is the ID of the chain
  string chain_id = 1;
  // finalized_chain_info is the info of the CZ
  babylon.zoneconcierge.v1.ChainInfo finalized_chain_info = 2;

  // epoch_info is the metadata of the last BTC-finalised epoch
  babylon.epoching.v1.Epoch epoch_info = 3;
  // raw_checkpoint is the raw checkpoint of this epoch
  babylon.checkpointing.v1.RawCheckpoint raw_checkpoint = 4;
  // btc_submission_key is position of two BTC txs that include the raw
  // checkpoint of this epoch
  babylon.btccheckpoint.v1.SubmissionKey btc_submission_key = 5;

  // proof is the proof that the chain info is finalized
  babylon.zoneconcierge.v1.ProofFinalizedChainInfo proof = 6;
}

// ProofEpochSealed is the proof that an epoch is sealed by the sealer header,
// i.e., the 2nd header of the next epoch With the access of metadata
// - Metadata of this epoch, which includes the sealer header
// - Raw checkpoint of this epoch
// The verifier can perform the following verification rules:
// - The raw checkpoint's `app_hash` is same as in the sealer header
// - More than 2/3 (in voting power) validators in the validator set of this
// epoch have signed `app_hash` of the sealer header
// - The epoch metadata is committed to the `app_hash` of the sealer header
// - The validator set is committed to the `app_hash` of the sealer header
message ProofEpochSealed {
  // validator_set is the validator set of the sealed epoch
  // This validator set has generated a BLS multisig on `app_hash` of
  // the sealer header
  repeated babylon.checkpointing.v1.ValidatorWithBlsKey validator_set = 1;
  // proof_epoch_info is the Merkle proof that the epoch's metadata is committed
  // to `app_hash` of the sealer header
  tendermint.crypto.ProofOps proof_epoch_info = 2;
  // proof_epoch_info is the Merkle proof that the epoch's validator set is
  // committed to `app_hash` of the sealer header
  tendermint.crypto.ProofOps proof_epoch_val_set = 3;
}

// ProofFinalizedChainInfo is a set of proofs that attest a chain info is
// BTC-finalised
message ProofFinalizedChainInfo {
  /*
    The following fields include proofs that attest the chain info is
    BTC-finalised
  */
  // proof_cz_header_in_epoch is the proof that the CZ header is timestamped
  // within a certain epoch
  tendermint.crypto.ProofOps proof_cz_header_in_epoch = 1;
  // proof_epoch_sealed is the proof that the epoch is sealed
  babylon.zoneconcierge.v1.ProofEpochSealed proof_epoch_sealed = 2;
  // proof_epoch_submitted is the proof that the epoch's checkpoint is included
  // in BTC ledger It is the two TransactionInfo in the best (i.e., earliest)
  // checkpoint submission
  repeated babylon.btccheckpoint.v1.TransactionInfo proof_epoch_submitted = 3;
}

// Btc light client chain segment grown during last finalized epoch
message BTCChainSegment {
  repeated babylon.btclightclient.v1.BTCHeaderInfo btc_headers = 1;
}
