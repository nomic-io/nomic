syntax = "proto3";
package babylon.btccheckpoint.v1;

import "babylon/btccheckpoint/v1/btccheckpoint.proto";
import "cosmos_proto/cosmos.proto";
import "cosmos/msg/v1/msg.proto";
import "babylon/btccheckpoint/v1/params.proto";
import "gogoproto/gogo.proto";

option go_package = "github.com/babylonchain/babylon/x/btccheckpoint/types";

// Msg defines the Msg service.
service Msg {
  option (cosmos.msg.v1.service) = true;

  // InsertBTCSpvProof tries to insert a new checkpoint into the store.
  rpc InsertBTCSpvProof(MsgInsertBTCSpvProof)
      returns (MsgInsertBTCSpvProofResponse);

  // UpdateParams updates the btccheckpoint module parameters.
  rpc UpdateParams(MsgUpdateParams) returns (MsgUpdateParamsResponse);
}

// MsgInsertBTCSpvProof defines resquest to insert a new checkpoint into the
// store
message MsgInsertBTCSpvProof {
  option (cosmos.msg.v1.signer) = "submitter";

  string submitter = 1;
  repeated babylon.btccheckpoint.v1.BTCSpvProof proofs = 2;
}

// MsgInsertBTCSpvProofResponse defines the response for the
// MsgInsertBTCSpvProof message
message MsgInsertBTCSpvProofResponse {}

// MsgUpdateParams defines a message to update the btccheckpoint module params.
message MsgUpdateParams {
  option (cosmos.msg.v1.signer) = "authority";

  // authority is the address of the governance account.
  // just FYI: cosmos.AddressString marks that this field should use type alias
  // for AddressString instead of string, but the functionality is not yet implemented
  // in cosmos-proto
  string authority = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // params defines the btccheckpoint parameters to update.
  //
  // NOTE: All parameters must be supplied.
  Params params = 2 [(gogoproto.nullable) = false];
}

// MsgUpdateParamsResponse defines the response to the MsgUpdateParams message.
message MsgUpdateParamsResponse {}
