syntax = "proto3";
package babylon.btclightclient.v1;

import "gogoproto/gogo.proto";
import "cosmos/msg/v1/msg.proto";
import "babylon/btclightclient/v1/params.proto";
import "cosmos_proto/cosmos.proto";

option go_package = "github.com/babylonchain/babylon/x/btclightclient/types";

// Msg defines the Msg service.
service Msg {
  option (cosmos.msg.v1.service) = true;

  // InsertHeaders adds a batch of headers to the BTC light client chain
  rpc InsertHeaders(MsgInsertHeaders) returns (MsgInsertHeadersResponse) {};

  // UpdateParams defines a method for updating btc light client module parameters.
  rpc UpdateParams(MsgUpdateParams) returns (MsgUpdateParamsResponse);
}

// MsgInsertHeaders defines the message for multiple incoming header bytes
message MsgInsertHeaders {
  option (cosmos.msg.v1.signer) = "signer";

  string signer = 1;
  repeated bytes headers = 2
      [ (gogoproto.customtype) =
            "github.com/babylonchain/babylon/types.BTCHeaderBytes" ];
}
// MsgInsertHeadersResponse defines the response for the InsertHeaders transaction
message MsgInsertHeadersResponse {}

// MsgUpdateParams defines a message for updating btc light client module parameters.
message MsgUpdateParams {
  option (cosmos.msg.v1.signer) = "authority";

  // authority is the address of the governance account.
  // just FYI: cosmos.AddressString marks that this field should use type alias
  // for AddressString instead of string, but the functionality is not yet implemented
  // in cosmos-proto
  string authority = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // params defines the btc light client parameters to update.
  //
  // NOTE: All parameters must be supplied.
  Params params = 2 [(gogoproto.nullable) = false];
}

// MsgUpdateParamsResponse is the response to the MsgUpdateParams message.
message MsgUpdateParamsResponse {}
